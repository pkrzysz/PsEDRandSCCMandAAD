function test-LogonUser
{
    [OutputType([IntPtr])]
    Param(
        [Parameter(Mandatory = $True)]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential,

        [ValidateSet('BATCH', 'INTERACTIVE', 'NETWORK', 'NETWORK_CLEARTEXT', 'NEW_CREDENTIALS', 'SERVICE')]
        [String]
        $LogonType  = 'NETWORK',

        [ValidateSet('DEFAULT', 'Negotiate', 'NTLM')]
        [String]
        $LogonProvider  = 'NTLM'
    )

    $LogonTokenHandle = [IntPtr]::Zero
    $NetworkCredential = $Credential.GetNetworkCredential()
    $UserDomain = $NetworkCredential.Domain
    $UserName = $NetworkCredential.UserName
    Write-Warning "[LogonUser] Executing LogonUser() with user: $($UserDomain)\$($UserName)"

    $LogonTypeID = Switch ($LogonType) {
        'BATCH' { 4 }
        'INTERACTIVE' { 2 }
        'NETWORK' { 3 }
        'NETWORK_CLEARTEXT' { 8 }
        'NEW_CREDENTIALS' { 9 }
        'SERVICE' { 5 }
    }

    $LogonProviderID = Switch ($LogonProvider) {
        'DEFAULT' { 0 }
        'WINNT35' { 1 }
        'NTLM' { 2 }
        'Negotiate' { 3 }
    }
$logonUserSignature =
@'
[DllImport( "advapi32.dll", SetLastError=true )]
public static extern bool LogonUser( String lpszUserName,
                                     String lpszDomain,
                                     String lpszPassword,
                                     int dwLogonType,
                                     int dwLogonProvider,
                                     ref IntPtr phToken );
'@
if (-not ([System.Management.Automation.PSTypeName]'Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.AdvApi32').Type)
{
    $AdvApi32 = Add-Type -MemberDefinition $logonUserSignature -Name "AdvApi32" -PassThru
}
    # LOGON32_LOGON_NEW_CREDENTIALS = 9, LOGON32_PROVIDER_WINNT50 = 3
    # this is to simulate "runas.exe /netonly" functionality
    $Result = $Advapi32::LogonUser($UserName, $UserDomain, $NetworkCredential.Password, $LogonTypeID, $LogonProviderID, [ref]$LogonTokenHandle);
    $errorCode = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
    "error:{0}" -f $errorCode
    if (-not $Result) {
    Write-Host -ForegroundColor Red ("Logon failed. LogonUser() Error: $(([ComponentModel.Win32Exception] $errorCode).Message)")
    }
    else {
        Write-Host -ForegroundColor Green ("Logon sucesfull. Handle:{0}" -f $LogonTokenHandle)
    }
}
